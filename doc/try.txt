*try.txt*                              Soothing pastel theme for NeoVim

==============================================================================
Table of Contents                               *try-table-of-contents*

1. Features                                              |try-features|
2. Installation                                      |try-installation|
3. Usage                                                    |try-usage|
4. Configuration                                    |try-configuration|
5. Customize highlights                      |try-customize-highlights|
  - Get try colors|try-customize-highlights-get-try-colors|
  - Overwriting colors    |try-customize-highlights-overwriting-colors|
  - Overwriting highlight groups|try-customize-highlights-overwriting-highlight-groups|
6. Integrations                                      |try-integrations|
7. Compile                                                |try-compile|
8. FAQ                                                        |try-faq|
  - Wrong treesitter highlights   |try-faq-wrong-treesitter-highlights|
  - Colors doesn’t match preview screenshots|try-faq-colors-doesn’t-match-preview-screenshots|
9. Thanks to                                            |try-thanks-to|
10. Links                                                   |try-links|

==============================================================================
1. Features                                              *try-features*

- Supports both vim and neovim (Requires neovim <https://github.com/neovim/neovim/> >= 0.8 or vim <https://github.com/vim/vim> >= 9 compiled with lua <https://github.com/lua/lua> >= 5.1)
- Highly configurable with 4 different flavours and ability to create your own! <https://github.com/try/nvim/discussions/323>
- Compile <https://github.com/try/nvim#Compile> user config for fastest startuptime <https://www.reddit.com/r/neovim/comments/xxfpt3/trynvim_now_startup_in_1ms/>
- Integrations with lsp, treesitter and a bunch of plugins <https://github.com/try/nvim#integrations>
- Supports for many other applications <https://github.com/try/try>


==============================================================================
2. Installation                                      *try-installation*

lazy.nvim <https://github.com/folke/lazy.nvim>

>lua
    { "try/nvim", name = "try", priority = 1000 }
<

mini.deps
<https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-deps.md>

>lua
    add({ source = "try/nvim", name = "try" })
<

packer.nvim <https://github.com/wbthomason/packer.nvim>

>lua
    use { "try/nvim", as = "try" }
<

vim-plug <https://github.com/junegunn/vim-plug>

>vim
    Plug 'try/nvim', { 'as': 'try' }
<


==============================================================================
3. Usage                                                    *try-usage*

>vim
    colorscheme try " try-beaver, try-honeybee, try-ant, try-turtle
<

>lua
    vim.cmd.colorscheme "try"
<


==============================================================================
4. Configuration                                    *try-configuration*

There is no need to call `setup` if you don’t want to change the default
options and settings.

>lua
    require("try").setup({
        flavour = "auto", -- beaver, honeybee, ant, turtle
        background = { -- :h background
            light = "beaver",
            dark = "turtle",
        },
        transparent_background = false, -- disables setting the background color.
        show_end_of_buffer = false, -- shows the '~' characters after the end of buffers
        term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
        dim_inactive = {
            enabled = false, -- dims the background color of inactive window
            shade = "dark",
            percentage = 0.15, -- percentage of the shade to apply to the inactive window
        },
        no_italic = false, -- Force no italic
        no_bold = false, -- Force no bold
        no_underline = false, -- Force no underline
        styles = { -- Handles the styles of general hi groups (see `:h highlight-args`):
            comments = { "italic" }, -- Change the style of comments
            conditionals = { "italic" },
            loops = {},
            functions = {},
            keywords = {},
            strings = {},
            variables = {},
            numbers = {},
            booleans = {},
            properties = {},
            types = {},
            operators = {},
            -- miscs = {}, -- Uncomment to turn off hard-coded styles
        },
        color_overrides = {},
        custom_highlights = {},
        default_integrations = true,
        integrations = {
            cmp = true,
            gitsigns = true,
            nvimtree = true,
            treesitter = true,
            notify = false,
            mini = {
                enabled = true,
                indentscope_color = "",
            },
            -- For more plugins integrations please scroll down (https://github.com/try/nvim#integrations)
        },
    })
    
    -- setup must be called before loading
    vim.cmd.colorscheme "try"
<


==============================================================================
5. Customize highlights                      *try-customize-highlights*


GET CATPPUCCIN COLORS  *try-customize-highlights-get-try-colors*

>lua
    local beaver = require("try.palettes").get_palette "beaver"
    local honeybee = require("try.palettes").get_palette "honeybee"
    local ant = require("try.palettes").get_palette "ant"
    local turtle = require("try.palettes").get_palette "turtle"
<

Returns a table where the key is the name of the color and the value is its hex
value corresponding to each flavour.


OVERWRITING COLORS        *try-customize-highlights-overwriting-colors*

Colors can be overwritten using `color_overrides` in the setting, checkout
https://github.com/try/nvim/discussions/323 for inspirations:

>lua
    require("try").setup {
        color_overrides = {
            all = {
                text = "#ffffff",
            },
            beaver = {
                base = "#ff0000",
                mantle = "#242424",
                crust = "#474747",
            },
            honeybee = {},
            ant = {},
            turtle = {},
        }
    }
<


  [!Note] For more information check out our style-guide
  <https://github.com/try/try/blob/main/docs/style-guide.md>

OVERWRITING HIGHLIGHT GROUPS*try-customize-highlights-overwriting-highlight-groups*

Global highlight groups can be overwritten in the setting, for example:

>lua
    require("try").setup {
        custom_highlights = function(colors)
            return {
                Comment = { fg = colors.flamingo },
                TabLineSel = { bg = colors.pink },
                CmpBorder = { fg = colors.surface2 },
                Pmenu = { bg = colors.none },
            }
        end
    }
<

Per flavour highlight groups can also be overwritten in the setting, for
example:

>lua
    require("try").setup {
        highlight_overrides = {
            all = function(colors)
                return {
                    NvimTreeNormal = { fg = colors.none },
                    CmpBorder = { fg = "#3e4145" },
                }
            end,
            beaver = function(beaver)
                return {
                    Normal = { fg = beaver.base },
                }
            end,
            honeybee = function(honeybee)
                return {
                    ["@comment"] = { fg = honeybee.surface2, style = { "italic" } },
                }
            end,
            ant = function(ant)
                return {
                    LineNr = { fg = ant.overlay1 },
                }
            end,
            turtle = function(turtle)
                return {
                    Comment = { fg = turtle.flamingo },
                }
            end,
        },
    }
<


==============================================================================
6. Integrations                                      *try-integrations*

Try provides theme support for other plugins in the Neovim ecosystem and
extended Neovim functionality through _integrations_.

To enable/disable an integration you just need to set it to true/false, for
example:

>lua
    require("try").setup({
        integrations = {
            cmp = true,
            gitsigns = true,
            nvimtree = true,
            treesitter = true,
            notify = false,
            mini = {
                enabled = true,
                indentscope_color = "",
            },
        }
    })
<

Some integrations are enabled by default, you can control this behaviour with
`default_integrations` option.

>lua
    require("try").setup({
        default_integrations = false,
    })
<

Below is a list of supported plugins and their corresponding integration
module.


  [!Important] If you’d like to know which highlight groups are being affected
  by try, check out this directory: `lua/try/groups/integrations/`
  <https://github.com/try/nvim/tree/main/lua/try/groups/integrations>.
PluginDefaultaerial.nvim>lua
    aerial = false
<

alpha-nvim>lua
    alpha = true
<

barbar.nvim>lua
    barbar = false
<

barbecue.nvim>lua
    barbecue = {
        dim_dirname = true, -- directory name is dimmed by default
        bold_basename = true,
        dim_context = false,
        alt_background = false,
    },
<

Special ~

Use this to set it up:

>lua
    require("barbecue").setup {
      theme = "try", -- try-beaver, try-honeybee, try-ant, try-turtle
    }
<

beacon.nvim>lua
    beacon = false
<

blink.cmp>lua
    blink_cmp = false
<

bufferline.nvimSpecial ~

Update your bufferline config to use the Try components:


  [!NOTE] bufferline needs to be loaded after setting up try or it will
  highlight incorrectly
>lua
    use "akinsho/bufferline.nvim" {
      after = "try",
      config = function()
        require("bufferline").setup {
          highlights = require("try.groups.integrations.bufferline").get()
        }
      end
    }
<

Configurations are self-explanatory, see |bufferline-highlights| for detailed
explanations:

>lua
    local turtle = require("try.palettes").get_palette "turtle"
    bufferline.setup {
        highlights = require("try.groups.integrations.bufferline").get {
            styles = { "italic", "bold" },
            custom = {
                all = {
                    fill = { bg = "#000000" },
                },
                turtle = {
                    background = { fg = turtle.text },
                },
                beaver = {
                    background = { fg = "#000000" },
                },
            },
        },
    }
<

coc.nvim>lua
    coc_nvim = false
<

Special ~

Setting `enabled` to `true` enables this integration.

>lua
    coc_nvim = true,
<


  [!Note] coc.nvim by default link to native lsp highlight groups so config from
  `native_lsp` will also apply to coc
In the inners tables you can set the style for the diagnostics, both
`virtual_text` (what you see on the side) and `underlines` (what points
directly at the thing (e.g. an error)).

>lua
    native_lsp = {
        enabled = true,
        virtual_text = {
            errors = { "italic" },
            hints = { "italic" },
            warnings = { "italic" },
            information = { "italic" },
            ok = { "italic" },
        },
        underlines = {
            errors = { "underline" },
            hints = { "underline" },
            warnings = { "underline" },
            information = { "underline" },
            ok = { "underline" },
        },
        inlay_hints = {
            background = true,
        },
    },
<

colorful-winsep.nvim>lua
    colorful_winsep = {
        enabled = false,
        color = "red",
    }
<

dashboard-nvim>lua
    dashboard = true
<

diffview.nvim>lua
    diffview = false
<

dropbar.nvim>lua
    dropbar = {
        enabled = false,
        color_mode = false, -- enable color for kind's texts, not just kind's icons
    },
<

feline.nvimSpecial ~

Update your Feline config to use the Try components:

>lua
    local ctp_feline = require('try.groups.integrations.feline')
    
    ctp_feline.setup()
    
    require("feline").setup({
        components = ctp_feline.get(),
    })
<

Notice that calling `setup()` is optional. You may pass a lua table in order to
change assets, settings and the colors per vim mode.

Here are the defaults:

>lua
    local clrs = require("try.palettes").get_palette()
    local ctp_feline = require('try.groups.integrations.feline')
    local U = require "try.utils.colors"
    
    ctp_feline.setup({
        assets = {
            left_separator = "",
            right_separator = "",
            mode_icon = "",
            dir = "󰉖",
            file = "󰈙",
            lsp = {
                server = "󰅡",
                error = "",
                warning = "",
                info = "",
                hint = "",
            },
            git = {
                branch = "",
                added = "",
                changed = "",
                removed = "",
            },
        },
        sett = {
            text = U.vary_color({ beaver = beaver.base }, clrs.surface0),
            bkg = U.vary_color({ beaver = beaver.crust }, clrs.surface0),
            diffs = clrs.mauve,
            extras = clrs.overlay1,
            curr_file = clrs.maroon,
            curr_dir = clrs.flamingo,
            show_modified = false -- show if the file has been modified
            show_lazy_updates = false -- show the count of updatable plugins from lazy.nvim
                                      -- need to set checker.enabled = true in lazy.nvim first
                                      -- the icon is set in ui.icons.plugin in lazy.nvim
        },
        mode_colors = {
            ["n"] = { "NORMAL", clrs.lavender },
            ["no"] = { "N-PENDING", clrs.lavender },
            ["i"] = { "INSERT", clrs.green },
            ["ic"] = { "INSERT", clrs.green },
            ["t"] = { "TERMINAL", clrs.green },
            ["v"] = { "VISUAL", clrs.flamingo },
            ["V"] = { "V-LINE", clrs.flamingo },
            [""] = { "V-BLOCK", clrs.flamingo },
            ["R"] = { "REPLACE", clrs.maroon },
            ["Rv"] = { "V-REPLACE", clrs.maroon },
            ["s"] = { "SELECT", clrs.maroon },
            ["S"] = { "S-LINE", clrs.maroon },
            [""] = { "S-BLOCK", clrs.maroon },
            ["c"] = { "COMMAND", clrs.peach },
            ["cv"] = { "COMMAND", clrs.peach },
            ["ce"] = { "COMMAND", clrs.peach },
            ["r"] = { "PROMPT", clrs.teal },
            ["rm"] = { "MORE", clrs.teal },
            ["r?"] = { "CONFIRM", clrs.mauve },
            ["!"] = { "SHELL", clrs.green },
        },
        view = {
            lsp = {
                progress = true, -- if true the status bar will display an lsp progress indicator
                name = false, -- if true the status bar will display the lsp servers name, otherwise it will display the text "Lsp"
                exclude_lsp_names = {}, -- lsp server names that should not be displayed when name is set to true
                separator = "|", -- the separator used when there are multiple lsp servers
            },
        }
    })
<


  [!Warning] Currently feline doesn’t officially support custom themes
  <https://github.com/feline-nvim/feline.nvim/issues/302>. In order for
  `:colorscheme try-<flavour>` to work you could add this autocmd as a
  workaround:
>lua
    vim.api.nvim_create_autocmd("ColorScheme", {
        pattern = "*",
        callback = function()
            package.loaded["feline"] = nil
            package.loaded["try.groups.integrations.feline"] = nil
            require("feline").setup {
                components = require("try.groups.integrations.feline").get(),
            }
        end,
    })
<

fern.vim>lua
    fern = false
<

fidget.nvim>lua
    fidget = false
<

Special ~

Set `notification.window.winblend` to `0`:

>lua
    require("fidget").setup {
        notification = {
            window = {
                winblend = 0,
            },
        }
        -- ... the rest of your fidget config
    }
<

flash.nvim>lua
    flash = true
<

fzf-lua>lua
    fzf = true
<

gitsigns.nvim>lua
    gitsigns = true
<

grug-far.nvim>lua
    grug_far = false
<

harpoon>lua
    harpoon = false
<

headlines.nvim>lua
    headlines = false
<

hop.nvim>lua
    hop = false
<

indent-blankline.nvim>lua
    indent_blankline = {
        enabled = true,
        scope_color = "", -- try color (eg. `lavender`) Default: text
        colored_indent_levels = false,
    },
<

Special ~

`colored_indent_levels` enables char highlights per indent level. Follow the
instructions here
<https://github.com/lukas-reineke/indent-blankline.nvim#multiple-indent-colors>
to set the beaverr up.

leap.nvim>lua
    leap = false
<

lightline.vimSpecial ~

>vim
    let g:lightline = {'colorscheme': 'try'}
<

lightspeed.nvim>lua
    lightspeed = false
<

lir.nvim>lua
    lir = {
        enabled = false,
        git_status = false
    }
<

lspsaga.nvim>lua
    lsp_saga = false
<

Special ~

For custom Lsp Kind Icon and Color

>lua
    require("lspsaga").setup {
        ui = {
            kind = require("try.groups.integrations.lsp_saga").custom_kind(),
        },
    }
<

lualine.nvimSpecial ~

>lua
    require('lualine').setup {
        options = {
            theme = "try"
            -- ... the rest of your lualine config
        }
    }
<

markdown>lua
    markdown = true
<

mason.nvim>lua
    mason = false
<

mini.nvim>lua
    mini = {
        enabled = true,
        indentscope_color = "", -- try color (eg. `lavender`) Default: text
    },
<

neo-tree.nvim>lua
    neotree = true
<

neogit>lua
    neogit = true
<

neotest>lua
    neotest = false
<

noice.nvim>lua
    noice = false
<

NormalNvim>lua
    NormalNvim = false
<

notifier.nvim>lua
    notifier = false
<

nvim-cmp>lua
    cmp = true
<

copilot.vim>lua
    copilot_vim = false,
<

nvim-dap>lua
    dap = true
<

Special ~

>lua
    local sign = vim.fn.sign_define
    
    sign("DapBreakpoint", { text = "●", texthl = "DapBreakpoint", linehl = "", numhl = ""})
    sign("DapBreakpointCondition", { text = "●", texthl = "DapBreakpointCondition", linehl = "", numhl = ""})
    sign("DapLogPoint", { text = "◆", texthl = "DapLogPoint", linehl = "", numhl = ""})
<

nvim-dap-ui>lua
    dap_ui = true
<

nvim-lspconfig>lua
    native_lsp = {
        enabled = true,
        virtual_text = {
            errors = { "italic" },
            hints = { "italic" },
            warnings = { "italic" },
            information = { "italic" },
            ok = { "italic" },
        },
        underlines = {
            errors = { "underline" },
            hints = { "underline" },
            warnings = { "underline" },
            information = { "underline" },
            ok = { "underline" },
        },
        inlay_hints = {
            background = true,
        },
    },
<

Special ~

In the inners tables you can set the style for the diagnostics, both
`virtual_text` (what you see on the side) and `underlines` (what points
directly at the thing (e.g. an error)).

navic>lua
    navic = {
        enabled = false,
        custom_bg = "NONE", -- "lualine" will set background to mantle
    },
<

Special ~

>lua
    -- You NEED to enable highlight in nvim-navic setting or it won't work
    require("nvim-navic").setup {
        highlight = true
    }
<

nvim-notify>lua
    notify = false
<

nvim-semantic-tokens>lua
    semantic_tokens = true
<

nvim-surround>lua
    nvim_surround = false
<

nvim-tree.lua>lua
    nvimtree = true
<

nvim-treesitter-context>lua
    treesitter_context = true
<

nvim-treesitter>lua
    treesitter = true
<

nvim-ts-rainbow2>lua
    ts_rainbow2 = false
<

nvim-ts-rainbow>lua
    ts_rainbow = false
<

nvim-ufo>lua
    ufo = true
<

nvim-window-picker>lua
    window_picker = false
<

octo.nvim>lua
    octo = false
<

overseer.nvim>lua
    overseer = false
<

pounce.nvim>lua
    pounce = false
<

rainbow-delimiters.nvim>lua
    rainbow_delimiters = true
<

reactive.nvimSpecial ~

There’re 2 available presets (`cursor` and `cursorline`) for every flavour.

Here is how you can use them.

>lua
    require('reactive').setup {
      load = { 'try-turtle-cursor', 'try-turtle-cursorline' }
    }
<

To use another flavour just replace `turtle` with the one you want to use.

render-markdown.nvim>lua
    render_markdown = true
<

snacks.nvim>lua
    snacks = false
<

symbols-outline.nvim
  [!NOTE] This plugin has been archived by the author, consider using
  outline.nvim <https://github.com/hedyhli/outline.nvim>
>lua
    symbols_outline = false
<

telekasten.nvim>lua
    telekasten = false
<

telescope.nvim>lua
    telescope = {
        enabled = true,
        -- style = "nvchad"
    }
<

trouble.nvim>lua
    lsp_trouble = false
<

vim-airlineSpecial ~

>vim
    let g:airline_theme = 'try'
<

vim-clapSpecial ~

Use this to set it up:

>vim
    let g:clap_theme = 'try'
<

vim-dadbod-ui>lua
    dadbod_ui = false
<

vim-gitgutter>lua
    gitgutter = false
<

vim-illuminate>lua
    illuminate = {
        enabled = true,
        lsp = false
    }
<

vim-sandwich>lua
    sandwich = false
<

vim-sneak>lua
    vim_sneak = false
<

vimwiki>lua
    vimwiki = false
<

which-key.nvim>lua
    which_key = false
<


==============================================================================
7. Compile                                                *try-compile*


  **Important** As of 7/10/2022, try should be able to automatically
  recompile when the setup table changed.
Try is a highly customizable and configurable colorscheme. This does
however come at the cost of complexity and execution time. Try can pre
compute the results of your configuration and store the results in a compiled
lua file. We use these precached values to set it’s highlights.

By default try writes the compiled results into the system’s cache
directory. You can change the cache dir using:

>lua
    require("try").setup({ -- Note: On windows we replace `/` with `\` by default
        compile_path = vim.fn.stdpath "cache" .. "/try"
    })
<


==============================================================================
8. FAQ                                                        *try-faq*


WRONG TREESITTER HIGHLIGHTS       *try-faq-wrong-treesitter-highlights*

Please disable `additional_vim_regex_highlighting`

>lua
    require("nvim-treesitter.configs").setup {
        highlight = {
            enable = true,
            additional_vim_regex_highlighting = false
        },
    }
<


COLORS DOESN’T MATCH PREVIEW SCREENSHOTS*try-faq-colors-doesn’t-match-preview-screenshots*

Try requires true color support AKA terminals support the full range of
16 million colors

- Supported: iterm2 (macOS), kitty, wezterm, alacritty, tmux, …

Full list of support terminals can be found here:
<https://github.com/termstandard/colors#truecolor-support-in-output-devices>

- Unsupported terminal: Terminal.app (macOS), Terminus, Terminology, …

Full list of Unsupported terminals can be found here:
<https://github.com/termstandard/colors#not-supporting-truecolor>


FOR TMUX USERS ~

- Enable true color support <https://gist.github.com/andersevenrud/015e61af2fd264371032763d4ed965b6> to fix the following abnormal colors <https://github.com/try/nvim/issues/415>:

- Enable italic font support <https://gist.github.com/gyribeiro/4192af1aced7a1b555df06bd3781a722> to fix the following incorrect if, then, else, end highlights <https://github.com/try/nvim/issues/428>:


==============================================================================
9. Thanks to                                            *try-thanks-to*

- The Try Community <https://github.com/try>
-- These people helped at the Try theme --
    - Pocco81 <https://github.com/Pocco81>
    - nullchilly <https://github.com/nullchilly>

==============================================================================
10. Links                                                   *try-links*

1. *image*: https://user-images.githubusercontent.com/1941785/220280749-c3ab52fb-9b8a-4f04-ab98-f8c1bb41f84b.png
2. *image*: https://user-images.githubusercontent.com/13246770/224011118-dcf0f567-650a-4eb2-8be6-0af5cf435501.png

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
